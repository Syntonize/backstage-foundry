app:
  title: Backstage
  baseUrl: ${APP_DOMAIN}:${APP_PORT}
    
organization:
  name: Syntonize

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  #
  baseUrl: ${APP_DOMAIN}:${APP_PORT}
  listen:
    port: ${BACKEND_PORT}
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: ${APP_DOMAIN}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DATABASE}
    ensureExists: true
    pluginDivisionMode: schema
    plugin:
      catalog:
        connection:
          database: ${POSTGRES_DATABASE}
      auth:
        connection:
          database: ${POSTGRES_DATABASE}
      app:
        connection:
          database: ${POSTGRES_DATABASE}
      scaffolder:
        connection:
          database: ${POSTGRES_DATABASE}
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
  # azure:
  #   - host: ${AZ_DEVOPS_HOST}
  #     credentials:
  #       - personalAccessToken: ${AZ_DEVOPS_ACCESS_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local'
  publisher:
    type: 'local'
  generator:
    runIn: local

auth:
  environment: development
  providers:
    github:
      development:
        clientId: ${GITHUB_AUTH_CLIENT_ID}
        clientSecret: ${GITHUB_AUTH_CLIENT_SECRET}
        ## uncomment if using GitHub Enterprise
        # enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}
        ## uncomment to set lifespan of user session
        # sessionDuration: { hours: 24 } # supports `ms` library format (e.g. '24h', '2 days'), ISO duration, "human duration" as used in code
        signIn:
          resolvers:
            # See https://backstage.io/docs/auth/microsoft/provider#resolvers for more resolvers
            - resolver: usernameMatchingUserEntityName
    # guest: {}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  rules:
    - allow: [User, Group, Component, Resource, Template, API, System, Domain]
  providers:
    github:
      coreCatalog:
        organization: 'Syntonize'
        catalogPath: '/catalog/*.yaml'
        filters:
          branch: 'main'
          repository: '^backstage-foundry'
        schedule:
          frequency: { minutes: 5 }
          timeout: { minutes: 3 }
      templates:
        organization: 'Syntonize'
        catalogPath: '/templates/**/*.yaml'
        filters:
          branch: 'main'
          repository: '^backstage-foundry'
        schedule:
          frequency: { minutes: 5 }
          timeout: { minutes: 3 }
      docs:
        organization: 'Syntonize'
        catalogPath: 'techdocs/catalog-info.yaml'
        filters:
          branch: 'main'
          repository: '^backstage-foundry'
        schedule:
          frequency: { minutes: 5 }
          timeout: { minutes: 3 }

  locations:
  #   - type: file
  #     target: catalog/group.yaml
  #     rules:
  #       - allow: [Group]
    - type: file
      target: catalog/users.yaml
      rules:
        - allow: [User]

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true
