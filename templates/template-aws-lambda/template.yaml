apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: aws-lambda-template
  title: AWS Lambda Python Template
  description: Scaffolder template for a python AWS Lambda
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Choose Application Details
      required:
        - applicationName
      properties:
        applicationName:
          title: Application Name
          type: string
          description: Enter the name of your application

        host:
          title: Host
          type: string
          enum:
            - github.com
          default: github.com
          description: Select the host for your repository

        owner:
          title: Owner
          type: string
          enum:
            - Syntonize
          default: Syntonize
          description: Select the organization for your repository

  steps:
    #####################
    #        CODE       #
    #####################
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-app
      name: Fetch App
      action: fetch:template
      input:
        url: ./app
        targetPath: ./app
        values:
          name: ${{ parameters.applicationName }}
          owner: ${{ parameters.owner }}

    # This step creates the repository.
    - id: create-repo
      name: Create Repository
      action: github:repo:create
      input:
        description: Publish ${{ parameters.applicationName }} repository
        repoUrl: ${{ parameters.host}}?repo=${{ parameters.applicationName }}&owner=${{ parameters.owner }}

    # This step publishes the contents of the working directory to Github.
    - id: publish-code
      name: Publish App
      action: github:repo:push
      input:
        sourcePath: ./app
        defaultBranch: dev
        description: Publish ${{ parameters.applicationName }} repository
        repoUrl: ${{ parameters.host}}?repo=${{ parameters.applicationName }}&owner=${{ parameters.owner }}

    # Register our new component in the catalog.
    - id: register-app
      name: Register App
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-code'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    #####################
    #       INFRA       #
    #####################

    - id: fetch-infra
      name: Fetch Infra
      action: fetch:template
      input:
        url: ./infra
        targetPath: ./infra
        values:
          name: ${{ parameters.applicationName }}
          owner: ${{ parameters.owner }}

    # This step creates the repository.
    - id: create-repo
      name: Create Repository
      action: github:repo:create
      input:
        description: Publish ${{ parameters.applicationName }} repository
        repoUrl: ${{ parameters.host}}?repo=${{ parameters.applicationName }}-infra&owner=${{ parameters.owner }}

    # This step publishes the contents of the working directory to Azure Devops.
    - id: publish-infra
      name: Publish Infra
      action: github:repo:push
      input:
        sourcePath: ./infra
        defaultBranch: dev
        description: Publish ${{ parameters.applicationName }}-infra repository
        repoUrl: ${{ parameters.host}}?repo=${{ parameters.applicationName }}-infra&owner=${{ parameters.owner }}

    #  Register our new component in the catalog.
    - id: register-infra
      name: Register Infra
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-infra'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
